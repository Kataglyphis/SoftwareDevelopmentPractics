package edu.kit.valaris.generation.roomgeneration;

import com.jme3.math.Vector3f;
import com.jme3.scene.Node;
import edu.kit.valaris.generation.roadgeneration.Road;
import jme3tools.optimize.GeometryBatchFactory;


/**
 * Implemetation of {@link IRoom}.
 *
 * Represents a Room generated by {@link DynamicRoomGenerator}
 *
 * @author Sidney Hansen
 */
public class DynamicRoom implements IRoom {

    private Road m_road;

    private Node m_assetRootNode;

    /**
     * Create a instance of DynamicRoom.
     *
     * @param road road inside the room.
     * @param assetRootNode root Node containing all assets placed in the room.
     */
    DynamicRoom(Road road, Node assetRootNode) {
        this.m_assetRootNode = assetRootNode;
        this.m_road = road;
    }

    @Override
    public Road getRoad() {
        return this.m_road;
    }

    @Override
    public Node generateSceneGraph() {

        Node roomRootNode = new Node("roomRootNode");
        this.m_assetRootNode.setLocalTranslation(m_road.getFirstRoadCursor().getPosition());
        this.m_assetRootNode.setLocalRotation(m_road.getFirstRoadCursor().getRotation());

        roomRootNode.attachChild(m_assetRootNode);

        GeometryBatchFactory.optimize(roomRootNode);

        return roomRootNode;
    }

    @Override
    public Vector3f[] getEntryFrame() {
        return m_road.getFirstRoadCursor().getRoadFrame();
    }

    @Override
    public Vector3f[] getExitFrame() {
        return m_road.getLastRoadCursor().getRoadFrame();
    }
}
